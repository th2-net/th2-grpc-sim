plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'signing'
    id "com.google.protobuf" version "0.9.3"
    id "org.owasp.dependencycheck" version "8.2.1"
}

group = 'com.exactpro.th2'
version = release_version

sourceCompatibility = 11
targetCompatibility = 11

ext {
    grpcVersion                 = '1.50.2'
    protobufVersion             = '3.23.2'
    serviceGeneratorVersion     = '3.3.1'
    sharedDir           = file("${project.rootDir}/shared")
    genBaseDir = file("${buildDir}/generated/source/proto") // from protobuf plugin
}

repositories {
    mavenCentral()
    maven {
            name 'Sonatype_snapshots'
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
            name 'Sonatype_releases'
            url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

sourceSets {
    main {
        // the proto plugins add generated dir to source sets
        resources {
            srcDirs "$genBaseDir/main/services/java/resources"
        }
    }
}

dependencies {
    api platform('com.exactpro.th2:bom:4.2.0')

    api "com.exactpro.th2:grpc-common:4.2.0-dev"
    api "com.google.protobuf:protobuf-java-util"
    api "io.grpc:grpc-stub"
    implementation "io.grpc:grpc-protobuf"
    implementation "io.grpc:grpc-core"
    implementation "io.grpc:grpc-netty"

    implementation "javax.annotation:javax.annotation-api:1.3.2"

    api "com.exactpro.th2:grpc-service-generator:${serviceGeneratorVersion}"
}

java {
    withJavadocJar()
    withSourcesJar()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
        services {
            artifact = "com.exactpro.th2:grpc-service-generator:${serviceGeneratorVersion}:all@jar"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
            services {
                option 'javaInterfacesPath=./java/src'
                option 'javaInterfacesImplPath=./java/src'
                option 'javaMetaInfPath=./java/resources'
                option 'pythonPath=./python'
            }
        }
        ofSourceSet('main')
    }
}

compileJava.dependsOn.add('generateProto')
processResources.dependsOn('generateProto')
sourcesJar.dependsOn('generateProto')

// conditionals for publications
tasks.withType(PublishToMavenRepository).configureEach {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
                project.hasProperty('nexus_user') &&
                project.hasProperty('nexus_password') &&
                project.hasProperty('nexus_url')) ||
                (repository == publishing.repositories.sonatype &&
                        project.hasProperty('sonatypeUsername') &&
                        project.hasProperty('sonatypePassword')) ||
                (repository == publishing.repositories.localRepo)
    }
}
tasks.withType(Sign).configureEach {
    onlyIf {
        project.hasProperty('signingKey') &&
                project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.configureEach { task ->
    if(task.name == 'initializeSonatypeStagingRepository' &&
        !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
              name = rootProject.name
              packaging = 'jar'
              description = rootProject.description
              url = vcs_url
              scm {
                url = vcs_url
              }
              licenses {
                license {
                  name = 'The Apache License, Version 2.0'
                  url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
              }
              developers {
                developer {
                  id = 'developer'
                  name = 'developer'
                  email = 'developer@exactpro.com'
                }
              }
              scm {
                url = vcs_url
              }
            }
        }
    }
    repositories {
        maven {
            name = 'localRepo'
            url = sharedDir
        }
//Nexus repo to publish from gitlab
        maven {
            name = 'nexusRepository'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}

dependencyCheck {
    formats = ['SARIF', 'JSON', 'HTML']
    failBuildOnCVSS = 5

    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}
